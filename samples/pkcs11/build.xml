<project name="PKCS11" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <property name="name" value="PKCS11"/>
	
    <property name="java.dir"     value="src/JAVA"/>
    <property name="java.src.dir"     value="src/JAVA/src"/>
    <property name="java.build.dir"   value="src/JAVA/build"/>
    <property name="java.classes.dir" value="${java.build.dir}/classes"/>

		<property name="c.dir"     value="C"/>
		<property name="c.src.dir"     value="C/src"/>
    <property name="c.build.dir"   location="C/build"/>
    <property name="c.lib.name"   value="skytrustpkcs11"/>
    <property name="c.wrapperlib.name"   value="pkcs11_java_wrap"/>
    <property name="c.exec.dir"     value="${c.build.dir}"/>

		<property name="c.lib.dir" location="lib/"/>
		<property name="c.include.dir" location="include/"/>
    <property name="c.include.java.dir" location="include/java/"/>

		<property name="swig.dir"     value="swig"/>
    <property name="swig.file"     value="${swig.dir}/generateProxys.i"/>
		<property name="swig.preproc.file"     value="${swig.dir}/resolve_macros_for_swig.sh"/>
    <property name="swig.generated.dir"     value="${java.src.dir}/proxys"/>

    <property name="debug" value="false"/>
    <property name="debuglevel" value="source,lines,vars"/>
	
    <target name="init" depends="SWIG-preprocess,SWIG,cmake"/>
    <target name="compile" depends="C-compile,JAVA-compile"/>
    <target name="build" depends="C-compile,jar"/>
    <target name="clean-build" depends="clean,jar,C-compile"/>
    <target name="cmake">
    	<mkdir dir="${c.build.dir}"/>
    	<exec osfamily="Unix" failonerror="true" dir="${c.build.dir}" executable="cmake" searchpath="true">
          <arg line="-D DEBUG=${debug} -D JAR='${c.lib.dir}/${ant.project.name}.jar' ../ "/>
     </exec>
    </target>
    <target name="JAVA-clean">
        <delete dir="${java.build.dir}"/>
    </target>
    <target name="C-clean" >
    		<exec osfamily="Unix" failonerror="true" executable="make" searchpath="true">
          <arg line="-C ${c.build.dir} clean"/>
        </exec>
    </target>
    <target name="SWIG-clean" >
        <delete dir="${swig.generated.dir}"/>
    	<delete file="${c.src.dir}/pkcs11_java_wrap.c"/>
    </target>
    <target name="clean" depends="C-clean,JAVA-clean,SWIG-clean"/>
<!-- SWIG -->  
    <target name="SWIG-preprocess">
      <exec input="${c.src.dir}/pkcs11t.h" executable="${swig.preproc.file}" output="${swig.dir}/pkcs11t_processed.h" failonerror="true"/>
      <exec dir="${swig.dir}" executable="./enums.sh" failonerror="true"/> 
    </target>
    <target name="SWIG" depends="SWIG-preprocess">
      <mkdir dir="${swig.generated.dir}"/>
      <exec executable="swig2.0" failonerror="true" searchpath="true">
        <arg line="-java -package proxys -outdir ${swig.generated.dir} -o ${c.src.dir}/pkcs11_java_wrap.c ${swig.file}"/>
      </exec>
    </target>
<!-- Ivy, for "Maven" dependency management -->
	<!-- here is the version of ivy we will use. change this property to try a newer 
         version if you want -->
	<property name="ivy.install.version" value="2.4.0" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="download-ivy" unless="skip.download">
    	<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="installing ivy..."/>
    	<get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
    		 dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>
    
    <!-- ================================= 
          target: install-ivy         
            this target is not necessary if you put ivy.jar in your ant lib directory
            if you already have ivy in your ant lib, you can simply remove this
            target and the dependency the 'go' target has on it
         ================================= -->
    <target name="install-ivy" depends="download-ivy" description="--> install ivy">
    	<!-- try to load ivy here from local ivy dir, in case the user has not already dropped
    	      it into ant's lib dir (note that the latter copy will always take precedence).
    	      We will not fail as long as local lib dir exists (it may be empty) and
    	      ivy is in at least one of ant's lib dir or the local lib dir. -->
    	<path id="ivy.lib.path">
    	    <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    	</path>
    	<taskdef resource="org/apache/ivy/ant/antlib.xml"
    	          uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>    
	
<!-- COMPILE -->   
    <target name="JAVA-compile" depends="install-ivy">
    	<ivy:retrieve symlink="true" sync="true"/>
        <mkdir dir="${java.classes.dir}"/>
        <javac srcdir="${java.src.dir}" debug="${debug}" debuglevel="${debuglevel}" destdir="${java.classes.dir}" includeantruntime="false">
        	<classpath>      <fileset dir="lib">
                <include name="**/*.jar"/>
              </fileset>
        	</classpath>
        </javac>
    </target>
    <target name="C-compile">
        <exec osfamily="Unix" failonerror="true" executable="make" searchpath="true">
          <arg line="-C ${c.build.dir} DEBUG=${debug} all"/>
        </exec>
        <exec osfamily="Unix" failonerror="true" executable="make" searchpath="true">
          <arg line="-C ${c.build.dir} DEBUG=${debug} install"/>
        </exec>
    </target>
    <target name="C-runtest">
        <exec osfamily="Unix" failonerror="true" executable="make" searchpath="true">
          <arg line="-C ${c.dir} DEBUG=${debug}
           runtest"/>
        </exec>
    </target>

<!-- JAR -->   
    <target name="jar" depends="JAVA-compile">
     <jar destfile="bin/${ant.project.name}.jar">
				<fileset dir="${java.classes.dir}"/>
				<fileset file="config"/>
				<restrict>
					<not>
     					<name name="META-INF*"/>
					</not>

					<archives>
						<zips>
							<fileset dir="${c.lib.dir}" includes="**/*.jar"/>
						</zips>
					</archives>
				</restrict>

			<manifest>
			    <attribute name="Class-Path" value="/usr/share/java/"/> 
			</manifest>
     </jar>
    </target>

</project>
